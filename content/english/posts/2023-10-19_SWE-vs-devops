---
title: "Choose Your Tech Career: Software Engineering or DevOps?"
author: "Julia Furst Morgado"
date: 2023-10-18T17:46:05.964Z
cover:
    image: https://blog-imgs-23.s3.amazonaws.com/swe-devops.png
tags: 
categories: 
    - Tech
slug: /choose-tech-career-software-engineer-or-devops
---

Are you struggling to decide between two exciting tech career paths: software engineering and DevOps engineering? I've been there, and I get it. While these two domains may appear worlds apart, they share common threads, each offering a distinct set of challenges and prospects. In this post, we'll dive deeper into both niches, make some side-by-side comparisons, and sprinkle in a few real-life examples to help you make a choice you won't regret.

## Passion

Before we dive into the nitty-gritty of these two roles, I want to emphasize an important requirement for success - **passion**. Your enthusiasm for what you do plays a pivotal role in your career. Whether you're writing code or managing infrastructure, your career path should be a journey that gets you fired up every day. So, before you make any decisions, ask yourself: "Am I genuinely thrilled about this field?" 

If you can't wake up in the morning thinking, "I can't wait to dive into this today," it's time to rethink your choice.

## Software Engineering

In the realm of software engineering, you often find yourself creating computer programs designed for everyday users. Software engineers, often abbreviated as SWEs, are the architects behind user-friendly applications that enhance and simplify life.

### Example 1: User Engagement and Content Recommendation

Now imagine you're a software engineer working on a social media application. 

Your task is to create a recommendation system that analyzes user interactions within the app. You collect data on what users click, like, comment on, and their other interests. Your goal is to use this data to optimize the algorithm that recommends content to keep users engaged with the application. You consider metrics like the number of posts a user clicks on, how many they like, how many they comment on, and how long they've been using the app on a given day. Your primary focus is on enhancing the user experience and increasing engagement. The goal may be to find ways to make these algorithms faster, and more efficient, or to improve other characteristics of data applications. 

### Example 2: UI Aesthetics

You have to work on the user interface (UI) of an application, addressing issues such as item alignment, color schemes, and button design to improve the overall user experience.

## DevOps Engineering

Now, DevOps engineering offers a different set of challenges. "DevOps engineers" (there is an ongoing discussion if DevOps as a methodology or a role,) make sure the technology behind the scenes works flawlessly. They focus on improving how computer systems run and dealing with issues when many people are using an app.

### Example 1: Infrastructure Scaling and Performance Optimization

Suppose you're in charge of a shopping website. Your responsibility is to build a system that monitors how the website is performing and ensures smooth and efficient operation. When your application experiences heavy traffic during the evening hours in the U.S. so you notice increased utilization and a decrease in performance, your system should automatically launch additional containers or allocate more resources to eliminate bottlenecks and maintain a fast and responsive user experience. As the evening comes to an end, the system scales down resources to save costs while still meeting performance requirements. The key metrics you monitor include the number of users online, API response time, CPU utilization, memory utilization, and network throughput. Your main focus here is on optimizing the application's infrastructure for performance and cost-efficiency. You might also look at how to speed up processes, like the time it takes for customers to make a purchase, by making the checkout process quicker.

This DevOps role emphasizes infrastructure management, automation, and performance optimization. You work behind the scenes to ensure that the application runs seamlessly, even during peak usage hours. It requires a deep understanding of system architecture, cloud technologies, and automation tools. Your goal is to enhance system reliability and maintain cost-effective operations.


### Example 2: Speeding Up the CICD Pipeline

Let's say that you've got a CICD pipeline and every time your developers open a merge request, it triggers a build process on your CICD server. And that takes five minutes to complete. Your goal is to make that go faster since developers must wait for five minutes before they can open their merge request after committing their code. Maybe you can increase the memory or CPU available to the build server, or maybe there are certain known dependencies for your application. Maybe you can create a new base Docker image where those dependencies are already pre-installed and the build process doesn't have to manage those. Or maybe part of your merge process involves spinning up a pull request environment so that the application can be tested. And maybe there are parts of that infrastructure that don't need to be spun up and torn down every time that you can have sitting idle and then you just drop the Docker container for that pull request into that environment. So you cut down the time that way, and you get the time down from five minutes down to three minutes. It may not seem monumental, but to someone sitting there and waiting to click on the pull request button, it's pretty significant.

## Common Threads

Both paths involve writing code to solve problems, yet the nature of these challenges and the primary audience they serve set these roles apart. 
In software engineering, your customer is the end user of the application. You strive to create a better user experience. In DevOps, usually, your customer is the application's infrastructure, and you aim to optimize its performance and resource allocation. It's a difference in perspective, but the core issue remains the same: problem-solving through code.

## Choosing Your Path: What Do You Enjoy Doing?

When choosing between these two jobs, think about what you like to do. If you enjoy making things look great and work well for users, then software engineering might be your path. But if you're good at solving problems and making systems run better, DevOps engineering could be your thing.

## A Modern Twist: Being Versatile

It's worth noting that in today's tech landscape, the lines between software and DevOps engineering can blur. Companies often expect professionals to have expertise in both areas. So, if you're just starting your career, be prepared for extensive learning and adaptation.

In the end, both careers offer exciting opportunities. Your choice should fit what you love doing and what you're good at. Understanding the distinctions and aligning them with your interests is crucial. Ultimately, it's your passion and dedication that will propel you towards a fulfilling and successful career. Remember, you can always try the other one if you change your mind later on. So, go ahead, pick your tech journey, and enjoy the adventure in the ever-changing tech field!
